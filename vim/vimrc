" 最初に準備すること
" mkdir -p ~/.vim/bundle/ ~/.vim/tmp/backup/ ~/.vim/tmp/snippets ~/.vim/tmp/swap/
" cd ~/.vim/bundle/
" git clone https://github.com/Shougo/neobundle.vim
" 以降neobundle.vimのREADMEに従う

"----------------------------------------------------
" 基本的な設定
"----------------------------------------------------
" viとの互換性をとらない(vimの独自拡張機能を使う為)
set nocompatible
set ambiwidth=double

"----------------------------------------------------
" Vandle設定
"----------------------------------------------------
filetype off                   " required!

if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle'))
NeoBundle 'Shougo/neobundle.vim'
" 以下のプラグインをバンドル
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
" 実行プラグインをバンドル
NeoBundle 'thinca/vim-quickrun'
" シンタックスプラグイン
NeoBundle 'scrooloose/syntastic'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'groenewege/vim-less'
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'windows' : 'tools\\update-dll-mingw',
            \     'cygwin'  : 'make -f make_cygwin.mak',
            \     'mac'     : 'make',
            \     'linux'   : 'make',
            \     'unix'    : 'gmake',
            \   },
            \ }
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'jceb/vim-hier'
NeoBundle 'dannyob/quickfixstatus'
NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/vim-watchdogs'
" perl regexpを使う
NeoBundle 'othree/eregex.vim'
" git edited
NeoBundle 'airblade/vim-gitgutter'
" editorconfig
NeoBundle 'editorconfig/editorconfig-vim'


call neobundle#end()

filetype plugin indent on

"----------------------------------------------------
" 基本的な設定
"----------------------------------------------------
" 改行コードの自動認識
set fileformats=unix,dos,mac
" ビープ音を鳴らさない
set vb t_vb=
" バックスペースキーで削除できるものを指定
" indent  : 行頭の空白
" eol     : 改行
" start   : 挿入モード開始位置より手前の文字
set backspace=indent,eol,start

"----------------------------------------------------
" バックアップ関係
"----------------------------------------------------
" バックアップをとらない
set nobackup
" ファイルの上書きの前にバックアップを作る
" (ただし、backup がオンでない限り、バックアップは上書きに成功した後削除される)
set writebackup
" バックアップをとる場合
"set backup
" バックアップファイルを作るディレクトリ
set backupdir=~/.vim/tmp/backup
" スワップファイルを作るディレクトリ
set directory=~/.vim/tmp/swap

"----------------------------------------------------
" 検索関係
"----------------------------------------------------
" コマンド、検索パターンを100個まで履歴に残す
set history=100
" 検索の時に大文字小文字を区別しない
set ignorecase
" 検索の時に大文字が含まれている場合は区別して検索する
set smartcase
" 最後まで検索したら先頭に戻る
set wrapscan
" インクリメンタルサーチを使わない
set noincsearch

"----------------------------------------------------
" 表示関係
"----------------------------------------------------
" タイトルをウインドウ枠に表示する
"set title
" 行番号を表示しない
set nonumber
" ルーラーを表示
"set ruler
" タブ文字を CTRL-I で表示し、行末に $ で表示する
"set list
" 入力中のコマンドをステータスに表示する
set showcmd
" ステータスラインを常に表示
set laststatus=2
" 括弧入力時の対応する括弧を表示
set showmatch
" 対応する括弧の表示時間を2にする
set matchtime=2
" 対応括弧に<>を追加
"set matchpairs& matchpairs+=<:>
" シンタックスハイライトを有効にする
syntax on
" 検索結果文字列のハイライトを有効にする
set hlsearch
" コメント文の色を変更
"highlight Comment ctermfg=DarkCyan
" コマンドライン補完を拡張モードにする
set wildmenu

" 入力されているテキストの最大幅
" (行がそれより長くなると、この幅を超えないように空白の後で改行される)を無効にする
set textwidth=0
" ウィンドウの幅より長い行は折り返して、次の行に続けて表示する
set wrap

" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" ステータスラインに表示する情報の指定
set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=<%l/%L:%p%%>
" ステータスラインの色
highlight StatusLine   term=NONE cterm=NONE ctermfg=black ctermbg=green

" タブが対応する空白の数
set tabstop=2
" タブやバックスペースの使用等の編集操作をするときに、タブが対応する空白の数
set softtabstop=4
" インデントの各段階に使われる空白の数
set shiftwidth=4
" タブを挿入するとき、代わりに空白を使わない
set expandtab

"----------------------------------------------------
" 国際化関係
"----------------------------------------------------
" 文字コードの設定
" fileencodingsの設定ではencodingの値を一番最後に記述する
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,euc-jp,cp932,iso-2022-jp
set fileencodings+=,ucs-2le,ucs-2,utf-8

"----------------------------------------------------
" オートコマンド
"----------------------------------------------------
augroup vimrc
    autocmd FileType html,tx,coffee,javascript,css,scss,sh,ruby,json,js,yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
augroup END
if has("autocmd")
    " 自動判定されない拡張子のファイルタイプを設定
    autocmd BufNewFile,BufRead *.scss set filetype=css
    autocmd BufNewFile,BufRead *.psgi set filetype=perl
    autocmd BufNewFile,BufRead *.t    set filetype=perl
    autocmd BufNewFile,BufRead *.hbs  set filetype=html
    autocmd BufNewFile,BufRead *.tx   set filetype=html
    " カーソル位置を記憶する
"    autocmd BufReadPost *
"        \ if line("'\"") > 0 && line("'\"") <= line("$") |
"        \   exe "normal g`\"" |
"        \ endif
"	autocmd FileType *
"        \ let &l:comments
"        \=join(filter(split(&l:comments, ','), 'v:val =~ "^[sme]"'), ',')
endif

"----------------------------------------------------
" インデント
"----------------------------------------------------
" オートインデントを無効にする
set noautoindent

" ------------------------------------------------------
" neocomplcache
" ------------------------------------------------------
" enable neocomplcache
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_ignore_case = 1
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
let g:neocomplcache_enable_underbar_completion = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" define snippets directory
let g:neocomplcache_snippets_dir = "~/.vim/tmp/snippets/"

" grep replace
if executable('ag')
  let g:unite_source_grep_command       = 'ag'
  let g:unite_source_grep_default_opts  = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" unite
let g:unite_enable_smart_case = 1
let s:unite_ignore_file_rec_patterns=
  \ ''
  \ .'vendor/bundle\|.bundle/\|\.sass-cache/\|'
  \ .'node_modules/\|bower_components/\|'
  \ .'\.git/\|htdocs/\|htmls/\|fonts/\|images/\|'
  \ .'\.\(bmp\|gif\|jpe\?g\|png\|webp\|ai\|psd\)"\?$'

call unite#custom#source(
  \ 'file_rec/async,file_rec/git',
  \ 'ignore_pattern',
  \ s:unite_ignore_file_rec_patterns)

let s:unite_ignore_directory_patterns=
  \ ''
  \ .'vendor/bundle\|.bundle/\|\.sass-cache/\|'
  \ .'node_modules/\|bower_components/'
  \ .'\.git/\|htdocs/\|htmls/\|fonts/\|images/'

call unite#custom#source(
  \ 'directory_mru,directory_rec/async',
  \ 'ignore_pattern',
  \ s:unite_ignore_directory_patterns)

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" CommandMap
map <C-n> :NERDTreeToggle<CR>

nnoremap [unite] <Nop>
nmap <Space>u [unite]
nnoremap [unite]f :<C-u>Unite file_rec/git -start-insert<CR>
nnoremap [unite]m :<C-u>Unite file_mru -start-insert<CR>
nnoremap [unite]l :<C-u>Unite line -start-insert<CR>
nnoremap [unite]o :<C-u>Unite outline -start-insert<CR>
nnoremap [unite]a :<C-u>Unite grep:. -start-insert<CR>
nnoremap [unite]r :<C-u>UniteResume -start-insert<CR>

nnoremap <C-]> g<C-]>

"----------------------------------------------------
" その他
"----------------------------------------------------
" バッファを切替えてもundoの効力を失わない
set hidden
" 起動時のメッセージを表示しない
set shortmess+=I

set t_RV=

